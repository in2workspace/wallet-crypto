plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
    id 'checkstyle'
    id 'org.owasp.dependencycheck' version '8.4.0'
}

group = 'es.in2'
version = '2.0.0'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.9"
}

checkstyle {
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

sonar {
    properties {
        property "sonar.projectName", "Wallet Crypto"
        property "sonar.projectKey", "in2workspace_wallet-crypto"
        property "sonar.organization", "in2workspace"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions",
                "src/main/java/es/in2/wallet/crypto/WalletCryptoApplication.java, " +
                        "src/main/java/es/in2/wallet/crypto/configuration/**, " +
                        "src/main/java/es/in2/wallet/crypto/domain/**, " +
                        "src/main/java/es/in2/wallet/crypto/exception/**, "
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { setUrl('https://jitpack.io') }
    maven { setUrl('https://maven.walt.id/repository/waltid/') }
    maven { setUrl('https://maven.walt.id/repository/waltid-ssi-kit/') }
    maven { setUrl('https://repo.danubetech.com/repository/maven-public/') }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2022.0.4"
        mavenBom "com.azure.spring:spring-cloud-azure-dependencies:5.7.0"
    }
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // JSON
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation("com.nimbusds:nimbus-jose-jwt:9.30.2")

    // nimbus-jjwt
    implementation("com.nimbusds:nimbus-jose-jwt:9.30.2")

    // Walt.id
    implementation 'id.walt:waltid-ssikit:1.2309221938.0'
    implementation 'id.walt:waltid-sd-jwt-jvm:1.2309211114.0'
    implementation 'id.walt.servicematrix:WaltID-ServiceMatrix:1.1.3'

    // Vault
    implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'
    testImplementation 'org.springframework.data:spring-data-keyvalue:3.1.5'

    // Azure
    implementation 'com.azure.spring:spring-cloud-azure-starter-appconfiguration:5.7.0'
    implementation 'com.azure.spring:spring-cloud-azure-starter-keyvault-secrets:5.7.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.2.0'

    // Logback
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    // Prometheus
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.11.5'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.projectreactor:reactor-test'
}

configurations.configureEach {
    exclude module: 'slf4j-simple'
}

tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "src/main/java/es/in2/wallet/crypto/WalletCryptoApplication.java",
                    "src/main/java/es/in2/wallet/crypto/configuration/**",
                    "src/main/java/es/in2/wallet/crypto/domain/**",
                    "src/main/java/es/in2/wallet/crypto/exception/**"
            ])
        }))
    }
}

tasks.register('printVersion') {
    doLast {
        println version
    }
}

tasks.register('printProjectName') {
    doLast {
        println rootProject.name
    }
}
